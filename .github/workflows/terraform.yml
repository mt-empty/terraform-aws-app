name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    uses: ./.github/workflows/build.yml

  terraform:
    name: "Terraform"
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

        # Download actions doesn't respect the working directory
      - name: Download static site files
        uses: actions/download-artifact@v3
        with:
          name: frontend-static-site
          path: ${{ github.workspace }}/frontend/dist/

      - run: pwd && ls -lha && ls -lha .. && ls -lha ../frontend && echo ${{ github.workspace }}
      - run: ls -lha ${{ github.workspace }}/frontend/dist/

      # check if artifacts exist
      - name: Check if artifacts exist
        run: test -d "${{ github.workspace }}/frontend/dist/" && echo "Found ${{ github.workspace }}/frontend/dist/ directory" || echo "No ${{ github.workspace }}/frontend/dist/ directory found"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() }}
        timeout-minutes: 10
        with:
          limit-access-to-actor: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      #   run: terraform apply -auto-approve
